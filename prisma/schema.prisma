generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model book {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  author          String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  reading_history reading_history[]
}

model content {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                       String                       @db.VarChar(255)
  title                      String                       @db.VarChar(255)
  publisher_id               String?                      @db.Uuid
  created_at                 DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                     @default(now()) @db.Timestamp(6)
  publisher                  publisher?                   @relation(fields: [publisher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  content_engagement         content_engagement[]
  spaced_repetition_schedule spaced_repetition_schedule[]
}

model content_engagement {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_id      String?  @db.Uuid
  user_id         String?  @db.Uuid
  engagement_date DateTime @db.Date
  engagement_type String   @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  content         content? @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model publisher {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  content     content[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reading_history {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id    String?  @db.Uuid
  user_id    String?  @db.Uuid
  date_read  DateTime @db.Date
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  book       book?    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model spaced_repetition_schedule {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  content_id String?  @db.Uuid
  next_date  DateTime @db.Date
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  content    content? @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                      String                       @unique @db.VarChar(255)
  firstName                  String?                      @db.VarChar(255)
  lastName                   String?                      @db.VarChar(255)
  roq_user_id                String                       @db.VarChar(255)
  tenant_id                  String                       @db.VarChar(255)
  created_at                 DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                     @default(now()) @db.Timestamp(6)
  content_engagement         content_engagement[]
  publisher                  publisher[]
  reading_history            reading_history[]
  spaced_repetition_schedule spaced_repetition_schedule[]
}
